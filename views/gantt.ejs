<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gantt</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" type="text/css" href="js/jsgantt_v12/jsgantt.css" />
</head>
<body>
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand text-capitalize" href="#">Gantt</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavDropdown">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="/general?id_cotizacion=<%=id%>">General</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/gantt?id_cotizacion=<%=id%>" >Gantt</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/costos?id_cotizacion=<%=id%>">Costos</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/clientes?id_cotizacion=<%=id%>">Clientes</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>
  <!-- Navbar -->
    <div class="container">
    <a class="btn btn-primary mt-3" style="text-decoration:none;color:white;" href="/"><i class="fa fa-arrow-left"></i> Regresar</a>
        <div class="row mb-5 mt-5">
            <div class="col">
              <div class="gantt border" id="gantt"></div>
            </div>
          </div>
          <div class="row mb-5 mt-5">
            <div class="col">
              <div id="myDiagramDiv" class="border" style="height: 400px;"></div>
            </div>
          </div>
    </div>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
      <script src="https://code.jquery.com/jquery-3.5.1.js" integrity="sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc=" crossorigin="anonymous"></script>
      <script src="js/jsgantt_v12/jsgantt.js"></script>
      <script src="https://unpkg.com/gojs/release/go-debug.js"></script>
      <script>
        window.addEventListener('DOMContentLoaded', (e)=>{
          pert();
          showGantt();
        });

        var actividades = '<%=actividades%>'.split(",");
        var fecha_inicio = '<%=fecha_inicio%>'.split(",");
        var fecha_termina = '<%=fecha_termina%>'.split(",");

        function showGantt(){
          g = new JSGantt.GanttChart('g',document.getElementById('gantt'), 'day');
          g.setShowRes(1); // Show/Hide Responsible (0/1)
          g.setShowComp(0); // Show/Hide % Complete(0/1)
          g.setDateDisplayFormat('yyyy-mm-dd') // Set format to display dates ('mm/dd/yyyy', 'dd/mm/yyyy', 'yyyy-mm-dd')
          g.setFormatArr("day") // Set format options (up to 4 : "minute","hour","day","week","month","quarter")
          for (i = 0; i < actividades.length; i++) {
            g.AddTaskItem(new JSGantt.TaskItem(i,actividades[i],fecha_inicio[i],fecha_termina[i],'ff6666','','','$'));
          }
          // TaskItem(pID, pName, pStart, pEnd, pColor, pLink, pMile, pRes, pComp, pGroup, pParent, pOpen, pDepend)
          g.Draw();	
          g.DrawDependencies();
        }

     
        function getNumberDays(fromDate,toDate){
          const diffInMs   = new Date(toDate) - new Date(fromDate)
          const diffInDays = diffInMs / (1000 * 60 * 60 * 24);
          return diffInDays + 1;
        }


         function pert() {
              var $ = go.GraphObject.make;  // for more concise visual tree definitions

              // colors used, named for easier identification
              var blue = "#0288D1";
              var pink = "#B71C1C";
              var pinkfill = "#F8BBD0";
              var bluefill = "#B3E5FC";

              myDiagram =
                $(go.Diagram, "myDiagramDiv",
                  {
                    initialAutoScale: go.Diagram.Uniform,
                    layout: $(go.LayeredDigraphLayout)
                  });

              myDiagram.nodeTemplate =
                $(go.Node, "Auto",
                  $(go.Shape, "Rectangle",  // the border
                    { fill: "white", strokeWidth: 2 },
                    new go.Binding("fill", "critical", function(b) { return (b ? pinkfill : bluefill); }),
                    new go.Binding("stroke", "critical", function(b) { return (b ? pink : blue); })),
                  $(go.Panel, "Table",
                    { padding: 0.5 },
                    $(go.RowColumnDefinition, { column: 1, separatorStroke: "black" }),
                    $(go.RowColumnDefinition, { column: 2, separatorStroke: "black" }),
                    $(go.RowColumnDefinition, { row: 1, separatorStroke: "black", background: "white", coversSeparators: true }),
                    $(go.RowColumnDefinition, { row: 2, separatorStroke: "black" }),
                    $(go.TextBlock,
                      new go.Binding("text", "text"),
                      {
                        row: 1, column: 0, columnSpan: 3, margin: 5,
                        textAlign: "center", font: "bold 14px sans-serif"
                      }),
                  )  // end Table Panel
                );  // end Node

              function linkColorConverter(linkdata, elt) {
                var link = elt.part;
                if (!link) return blue;
                var f = link.fromNode;
                if (!f || !f.data || !f.data.critical) return blue;
                var t = link.toNode;
                if (!t || !t.data || !t.data.critical) return blue;
                return pink;  // when both Link.fromNode.data.critical and Link.toNode.data.critical
              }

              myDiagram.linkTemplate =
                $(go.Link,
                  { toShortLength: 6, toEndSegmentLength: 20 },
                  $(go.Shape,
                    { strokeWidth: 4 },
                    new go.Binding("stroke", "", linkColorConverter)),
                  $(go.Shape,  // arrowhead
                    { toArrow: "Triangle", stroke: null, scale: 1.5 },
                    new go.Binding("fill", "", linkColorConverter))
                );

              // here's the data defining the graph
              var nodeDataArray = [];
              for (i = 0; i < actividades.length; i++) {
                nodeDataArray.push({ key: i, text: actividades[i] });
              }
              var linkDataArray = [];

              for (i = 0; i < actividades.length; i++) {
                linkDataArray.push({ from: i, to: i+1 });
              }
              myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
            }
      </script>
</body>
</html>

